create or replace function insert_order_detail()
returns trigger
as
$body$
declare
	maso_Order character varying(20) = new."ID_Order";
	maso_Product character varying(20) = new."ID_Product";
	quantity numeric = new."Quantity";
	n numeric = new."Quantity";
begin
-- 	import
	UPDATE public."Order"
		SET "Quantity" = "Quantity" + quantity
		WHERE "ID_Order" = maso_Order;
	UPDATE public."WareHouse"
		SET "Quantity" = "Quantity" - quantity , "Quantity_wait" = "Quantity_wait" + quantity
		WHERE "ID_Product" = maso_Product;
	FOR i IN 1..n
	LOOP
		IF 
			(select t."Quantity" from (select row_number() over ( order by "ID_CSM") as "STT", *
				from "WareHouse_detail" where "ID_Product" = maso_Product) as t
				where t."STT" = i) >= quantity
		THEN
			BEGIN
				UPDATE public."WareHouse_detail"
					SET "Quantity"= "Quantity" - quantity
					WHERE "ID_Product" = maso_Product 
					and "ID_CSM" = (select t."ID_CSM" from (select row_number() over ( order by "ID_CSM") as "STT", *
									from "WareHouse_detail" where "ID_Product" = maso_Product) as t
									where t."STT" = i);
			END;
			exit;
		ELSE
			BEGIN
				UPDATE public."WareHouse_detail"
					SET "Quantity"= "Quantity" + (select t."Quantity" from (select row_number() over ( order by "ID_CSM") as "STT", *
													from "WareHouse_detail" where "ID_Product" = maso_Product) as t
													where t."STT" = i)
					WHERE "ID_Product" = maso_Product 
					and "ID_CSM" = (select t."ID_CSM" from (select row_number() over ( order by "ID_CSM") as "STT", *
									from "WareHouse_detail" where "ID_Product" = maso_Product) as t
									where t."STT" = i + 1);
				UPDATE public."WareHouse_detail"
					SET "Quantity"= 0
					WHERE "ID_Product" = maso_Product 
					and "ID_CSM" = (select t."ID_CSM" from (select row_number() over ( order by "ID_CSM") as "STT", *
									from "WareHouse_detail" where "ID_Product" = maso_Product) as t
									where t."STT" = i);
			END;
		END IF;
	END LOOP;	
return new;
end;
$body$
language plpgsql;

create or replace trigger check_insert_order
after insert
on "Order_detail"
for each row
execute procedure insert_order_detail();


-- drop trigger if exists check_insert_order on "Order_detail";
-- drop function if exists insert_order_detail();

-- INSERT INTO public."Order"("ID_Order", "Day", "Quantity", "Status") 
-- 					VALUES ('O2', '2021-06-27', 0, 'Wait');
-- INSERT INTO public."Order_detail"("ID_Order", "ID_Product", "Quantity", "Status") 
-- 						VALUES ('O2', 'K23', 15,'Wait');

